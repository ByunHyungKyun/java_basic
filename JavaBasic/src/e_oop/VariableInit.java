package e_oop;

public class VariableInit {

	//변수의 3가지 초기화 방법
	//1.[명시적 초기화 ]
	int var=10;
	static int staticVar=20;
	//2.[초기화블럭]
	{
		var=30;
	}
	static{
		staticVar=30;
	}
	/*
	 * 3.[생성자]-제일중요
	 * 클래스의 같은 이름의메서드
	 * 인스턴스 변수를 초기화하기위해사용한다 
	 * 클래스에 생성자는 반드시하나 이상 존재해야한다 
	 * 직접 선언해주지않으면 컴파일러가 기본 생성자를 만들어 준다 
	 * 생성자는 리턴타입이 없다 (객체만만들기때문 )(대신 파라미터는 존재할수 있다 )
	 */
	VariableInit(){ //클래스의이름과 똑같은 메서드를 생성자라 한다 
		var=50;
		
		//생성자 사용이유 
		//초기화에 여러줄의 코드가 필요할때 
		//초기화에 파라미터가 필요할때
	}
	
	public static void main(String[] args) {
		
		Init i=new Init();//객체생성
		i.a=10;
		i.b=20;
		i.c=30;
		
		
		Init i2=new Init();
		i2.a=40;
		i2.b=50;
		i2.c=60;
		
		Init i3=new Init(70,80,90);//생성자 사용이유,초기화에 여러줄의 코드가 필요할때,초기화에 파라미터가 필요할때
		
	}
}

class Init{
	int a;
	int b;
	int c;
	String d;
	Init(int a,int b,int c){
		this.a=a;
		this.b=b;
		this.c=c;
		//this: 인스턴스 변수와 지역변수의 이름이 같을때 구분하기 위해사용한다 :클래스객체의주소를 가지고있는 변수 
	}
	
	//오버로딩: 같은 이름의 메서드를 여러개 정의하는것
	Init(){ 
		 //클래스에 생성자는 반드시하나 이상 존재해야한다 
		 //직접 선언해주지않으면 컴파일러가 기본 생성자를 만들어 준다,원래는 안만들어도되는데,위에 생성자가 만들어져서 이제는 우리가 직접 기본 생성자를 만들어 줘야 에러가 안난다 
		//a=10;
		//b=20;
		//c=30;
		this(10,20,30);
		//this() : 생성자에서 다른 생성자를 호출할때 사용한다
	}
	
	

	
	
}




















